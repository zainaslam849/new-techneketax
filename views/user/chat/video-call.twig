{% extends 'user/master_call.twig' %}
{% block content %}

    <!--begin::Content-->
    <div class="d-flex flex-column flex-column-fluid" >
        <div class="card card-flush h-lg-100" id="kt_meeting_card">
            <div class="card-body p-0" id="meet" style="height: 100%; width: 100%;"></div>
        </div>
    </div>
    <!--end::Content-->

    <style>
        .wrapper{
            padding-top: 50px !important;
            padding-left: unset !important;
        }
        .header {
            left: 0px !important;
        }
        /* Full height container for the meeting */
        #kt_content {
            padding: 0;
            height: 100vh;
            overflow: hidden;
        }

        /* Ensure the card body takes up full height */
        #kt_meeting_card .card-body {
            height: 100%;
            padding: 0;
            background-color: #f0f0f0; /* Optional background while the meeting loads */
        }

        /* For a seamless Jitsi iframe experience */
        #meet {
            height: 100%;
            width: 100%;
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            #kt_meeting_card .card-body {
                padding: 0;
            }
        }
    </style>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src='https://meet.techneketax.com/external_api.js'></script>
    <script>
        function StartMeeting(meeting_name, room_name, user_name, user_email, user_image_url) {
            const domain = 'meet.techneketax.com';
            const tool_bar_buttons = ['microphone', 'camera', 'desktop', 'profile', 'settings', 'raisehand', 'videoquality', 'hangup'];
            const options = {
                roomName: room_name,
                width: '100%',
                height: '100%',
                parentNode: document.querySelector('#meet'),
                userInfo: {
                    displayName: user_name,
                    email: user_email
                },
                configOverwrite: {
                    doNotStoreRoom: true,
                    startWithVideoMuted: false,
                    startWithAudioMuted: false,
                    prejoinPageEnabled: false,
                    remoteVideoMenu: {
                        disableKick: true
                    }
                },
                interfaceConfigOverwrite: {
                    SHOW_JITSI_WATERMARK: false,
                    SHOW_WATERMARK_FOR_GUESTS: false,
                    DEFAULT_REMOTE_DISPLAY_NAME: 'Guest',
                    TOOLBAR_BUTTONS: tool_bar_buttons
                }
            };

            const apiObj = new JitsiMeetExternalAPI(domain, options);
            apiObj.executeCommand('subject', meeting_name);
            apiObj.addEventListeners({
                readyToClose: function () {
                    $.ajax({
                        url: '/call/hangup/' + room_name,
                        type: 'POST',
                        success: function (response) {
                            console.log('Meeting ended, server notified', response);
                        },
                        error: function (xhr, status, error) {
                            console.error('Failed to notify server on meeting end:', status, error);
                        }
                    });
                    $('#meet').empty();
                },
                participantJoined: function (data) {
                    console.log('participantJoined', data);
                    apiObj.executeCommand('subject', meeting_name);
                },
                participantLeft: function (data) {
                    console.log('participantLeft', data);
                }
            });
            apiObj.executeCommand('avatarUrl', user_image_url);
        }

        // Start the meeting
        const meeting_name = 'TechnekeTax Video Calling';
        const room_name = '{{ room_id }}';
        const user_name = '{{ loginName }}';
        const user_email = '{{ userEmail }}';
        const user_image = '{{ profile_image }}';

        StartMeeting(meeting_name, room_name, user_name, user_email, user_image);

        function checkCallStatus() {
            $.ajax({
                url: '/call/status',
                type: 'POST',
                data: {
                    channel_id: '{{ room_id }}',
                },
                success: function (response) {
                    if (response.status === "hangup") {
                        window.location.href = '/user/chat/{{ pickup_id }}';
                    }
                },
                error: function (error) {
                    console.error('Error checking call status.', error);
                }
            });
        }

        // Check the call status periodically
        setInterval(checkCallStatus, 1000);

        function hangUpCall(channelId, user_id= null) {
            $.ajax({
                url: '/call/hangup/' + encodeURIComponent(channelId),
                type: 'POST',
                dataType: 'json',
                success: function(response) {
                    if (response.status === true) {
                        // Redirect to /user/chat if status is true
                        window.location.href = '/user/chat/'+user_id;
                    } else {
                        console.error('Hangup failed: ', response.message || 'Unknown error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error: ' + status + ' - ' + error);
                }
            });
        }

    </script>


{% endblock %}
